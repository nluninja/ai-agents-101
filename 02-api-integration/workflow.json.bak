{
  "name": "02 - API Integration Agent",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "weather-agent",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-weather",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "user-message",
              "name": "userMessage",
              "value": "={{ $json.body.message }}",
              "type": "string"
            }
          ]
        }
      },
      "id": "extract-message",
      "name": "Extract Message",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "temperature": 0.7
        },
        "text": "={{ $json.userMessage }}",
        "systemMessage": "You are a helpful weather assistant. When users ask about weather conditions, use the get_weather tool to fetch current information. Provide friendly, conversational responses with relevant details.\n\nIf asked about non-weather topics, answer helpfully but mention your specialty is weather information.",
        "hasOutputParser": false
      },
      "id": "agent-with-tools",
      "name": "Agent with Tools",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [680, 300]
    },
    {
      "parameters": {
        "name": "get_weather",
        "description": "Get current weather information for a specific location. Use this when users ask about weather conditions, temperature, or forecasts.",
        "workflowId": "={{ $workflow.id }}",
        "specifyInputSchema": true,
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"location\": {\n      \"type\": \"string\",\n      \"description\": \"City name or location (e.g., 'London', 'New York', 'Tokyo')\"\n    }\n  },\n  \"required\": [\"location\"]\n}"
      },
      "id": "weather-tool",
      "name": "Weather Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.1,
      "position": [680, 500]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://api.openweathermap.org/data/2.5/weather",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ $json.location }}"
            },
            {
              "name": "appid",
              "value": "YOUR_OPENWEATHER_API_KEY"
            },
            {
              "name": "units",
              "value": "metric"
            }
          ]
        },
        "options": {}
      },
      "id": "get-weather-api",
      "name": "Get Weather Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 500]
    },
    {
      "parameters": {
        "jsCode": "// Parse the location from the tool input\nconst location = $input.first().json.location;\n\nreturn [{\n  json: {\n    location: location\n  }\n}];"
      },
      "id": "parse-location",
      "name": "Parse Location",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [920, 500]
    },
    {
      "parameters": {
        "jsCode": "// Format weather data into a readable response\nconst data = $input.first().json;\n\n// Handle API errors\nif (data.cod && data.cod !== 200) {\n  return [{\n    json: {\n      error: true,\n      message: data.message || \"Could not fetch weather data\"\n    }\n  }];\n}\n\n// Format successful response\nconst weather = {\n  location: data.name,\n  country: data.sys.country,\n  temperature: Math.round(data.main.temp),\n  feels_like: Math.round(data.main.feels_like),\n  condition: data.weather[0].description,\n  humidity: data.main.humidity,\n  wind_speed: Math.round(data.wind.speed * 3.6), // Convert m/s to km/h\n  icon: data.weather[0].icon\n};\n\n// Create conversational response\nlet response = `The weather in ${weather.location}, ${weather.country} is currently ${weather.temperature}°C`;\nresponse += ` with ${weather.condition}.`;\nresponse += ` It feels like ${weather.feels_like}°C.`;\nresponse += ` Humidity is ${weather.humidity}% and wind speed is ${weather.wind_speed} km/h.`;\n\nreturn [{\n  json: {\n    ...weather,\n    formatted_response: response\n  }\n}];"
      },
      "id": "format-weather",
      "name": "Format Weather Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1320, 500]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success",
              "name": "success",
              "value": "true",
              "type": "boolean"
            },
            {
              "id": "response",
              "name": "response",
              "value": "={{ $json.output }}",
              "type": "string"
            },
            {
              "id": "timestamp",
              "name": "timestamp",
              "value": "={{ $now }}",
              "type": "string"
            }
          ]
        }
      },
      "id": "format-final-response",
      "name": "Format Final Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "respond-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Message": {
      "main": [
        [
          {
            "node": "Agent with Tools",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agent with Tools": {
      "main": [
        [
          {
            "node": "Format Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Weather Tool": {
      "main": [
        [
          {
            "node": "Parse Location",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Location": {
      "main": [
        [
          {
            "node": "Get Weather Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Weather Data": {
      "main": [
        [
          {
            "node": "Format Weather Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Weather Response": {
      "main": [
        [
          {
            "node": "Weather Tool",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Final Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-01-27T12:00:00.000Z",
  "versionId": "1"
}

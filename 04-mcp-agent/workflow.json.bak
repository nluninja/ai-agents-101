{
  "name": "04 - MCP Agent",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "mcp-agent",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-mcp",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract message from webhook\nconst body = $input.first().json.body;\nconst message = body.message;\n\nif (!message) {\n  throw new Error('Message is required');\n}\n\nreturn [{\n  json: {\n    message,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "extract-message",
      "name": "Extract Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Simulated MCP Tool Discovery\n// In production, this would communicate with actual MCP server via stdio\n\nconst mcpTools = [\n  {\n    name: 'read_file',\n    description: 'Read the contents of a file from the filesystem',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: {\n          type: 'string',\n          description: 'Path to the file to read'\n        }\n      },\n      required: ['path']\n    }\n  },\n  {\n    name: 'list_directory',\n    description: 'List all files and directories in a given path',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: {\n          type: 'string',\n          description: 'Directory path to list'\n        }\n      },\n      required: ['path']\n    }\n  },\n  {\n    name: 'search_files',\n    description: 'Search for files matching a pattern',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        pattern: {\n          type: 'string',\n          description: 'Search pattern (e.g., \"*.js\")'\n        },\n        directory: {\n          type: 'string',\n          description: 'Directory to search in'\n        }\n      },\n      required: ['pattern', 'directory']\n    }\n  }\n];\n\nreturn [{\n  json: {\n    tools: mcpTools,\n    serverInfo: {\n      name: 'filesystem-server',\n      version: '1.0.0'\n    }\n  }\n}];"
      },
      "id": "discover-mcp-tools",
      "name": "Discover MCP Tools",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300],
      "notes": "This simulates MCP tool discovery. In production, integrate with actual MCP server."
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "temperature": 0.7
        },
        "text": "={{ $('Extract Message').first().json.message }}",
        "systemMessage": "You are an AI assistant with access to filesystem tools via MCP (Model Context Protocol).\n\nYou have access to these tools:\n{{ $json.tools }}\n\nWhen users ask to:\n- Read files: Use read_file tool\n- List directories: Use list_directory tool\n- Search files: Use search_files tool\n\nAnalyze the user's request and determine which tool to use. Format your tool call as JSON:\n\n{\n  \"tool\": \"tool_name\",\n  \"arguments\": { ... }\n}\n\nIf no tool is needed, respond conversationally."
      },
      "id": "agent-decision",
      "name": "Agent Decision",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [900, 300],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse agent decision and check if tool call is needed\nconst agentResponse = $input.first().json.message;\n\ntry {\n  // Try to extract JSON from response\n  const jsonMatch = agentResponse.match(/\\{[\\s\\S]*\\}/);\n  \n  if (jsonMatch) {\n    const toolCall = JSON.parse(jsonMatch[0]);\n    \n    if (toolCall.tool && toolCall.arguments) {\n      return [{\n        json: {\n          needsToolCall: true,\n          tool: toolCall.tool,\n          arguments: toolCall.arguments,\n          originalResponse: agentResponse\n        }\n      }];\n    }\n  }\n  \n  // No tool call needed\n  return [{\n    json: {\n      needsToolCall: false,\n      response: agentResponse\n    }\n  }];\n} catch (error) {\n  // Parsing error, treat as regular response\n  return [{\n    json: {\n      needsToolCall: false,\n      response: agentResponse\n    }\n  }];\n}"
      },
      "id": "parse-decision",
      "name": "Parse Decision",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {\n              \"value1\": \"={{ $json.needsToolCall }}\",\n              \"value2\": \"true\"\n            }\n          ]\n        }\n      },\n      \"id\": \"check-tool-needed\",\n      \"name\": \"Tool Needed?\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"typeVersion\": 1,\n      \"position\": [1340, 300]\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"// Execute MCP Tool\\n// In production, this would communicate with MCP server\\n\\nconst toolName = $input.first().json.tool;\\nconst args = $input.first().json.arguments;\\n\\n// Simulate tool execution\\nlet result;\\n\\nswitch (toolName) {\\n  case 'read_file':\\n    result = {\\n      success: true,\\n      content: `[Simulated file content from ${args.path}]\\n\\nThis is example content. In production, this would read from actual MCP server.`,\\n      path: args.path\\n    };\\n    break;\\n    \\n  case 'list_directory':\\n    result = {\\n      success: true,\\n      files: ['file1.txt', 'file2.js', 'folder1', 'README.md'],\\n      path: args.path\\n    };\\n    break;\\n    \\n  case 'search_files':\\n    result = {\\n      success: true,\\n      matches: ['src/app.js', 'src/utils.js', 'tests/test.js'],\\n      pattern: args.pattern,\\n      directory: args.directory\\n    };\\n    break;\\n    \\n  default:\\n    result = {\\n      success: false,\\n      error: `Unknown tool: ${toolName}`\\n    };\\n}\\n\\nreturn [{\\n  json: {\\n    toolName,\\n    result,\\n    executedAt: new Date().toISOString()\\n  }\\n}];\"\n      },\n      \"id\": \"execute-mcp-tool\",\n      \"name\": \"Execute MCP Tool\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [1560, 200],\n      \"notes\": \"Simulates MCP tool execution. Replace with actual MCP server communication.\"\n    },\n    {\n      \"parameters\": {\n        \"model\": \"gpt-4o-mini\",\n        \"options\": {\n          \"temperature\": 0.7\n        },\n        \"messages\": {\n          \"messageValues\": [\n            {\n              \"message\": \"={{ $('Extract Message').first().json.message }}\"\n            },\n            {\n              \"message\": \"Tool executed: {{ $json.toolName }}\\n\\nResult: {{ JSON.stringify($json.result) }}\\n\\nProvide a helpful response to the user based on this tool result.\"\n            }\n          ]\n        },\n        \"systemMessage\": \"You are a helpful assistant. Format tool results into natural, user-friendly responses.\"\n      },\n      \"id\": \"format-tool-response\",\n      \"name\": \"Format Tool Response\",\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      \"typeVersion\": 1,\n      \"position\": [1780, 200],\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"openai-credentials\",\n          \"name\": \"OpenAI API\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"success\",\n              \"name\": \"success\",\n              \"value\": \"true\",\n              \"type\": \"boolean\"\n            },\n            {\n              \"id\": \"response\",\n              \"name\": \"response\",\n              \"value\": \"={{ $json.message }}\",\n              \"type\": \"string\"\n            },\n            {\n              \"id\": \"used-mcp\",\n              \"name\": \"usedMCP\",\n              \"value\": \"true\",\n              \"type\": \"boolean\"\n            },\n            {\n              \"id\": \"timestamp\",\n              \"name\": \"timestamp\",\n              \"value\": \"={{ $now }}\",\n              \"type\": \"string\"\n            }\n          ]\n        }\n      },\n      \"id\": \"format-final-with-tool\",\n      \"name\": \"Format Response (With Tool)\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"typeVersion\": 3.2,\n      \"position\": [2000, 200]\n    },\n    {\n      \"parameters\": {\n        \"assignments\": {\n          \"assignments\": [\n            {\n              \"id\": \"success\",\n              \"name\": \"success\",\n              \"value\": \"true\",\n              \"type\": \"boolean\"\n            },\n            {\n              \"id\": \"response\",\n              \"name\": \"response\",\n              \"value\": \"={{ $json.response }}\",\n              \"type\": \"string\"\n            },\n            {\n              \"id\": \"used-mcp\",\n              \"name\": \"usedMCP\",\n              \"value\": \"false\",\n              \"type\": \"boolean\"\n            },\n            {\n              \"id\": \"timestamp\",\n              \"name\": \"timestamp\",\n              \"value\": \"={{ $now }}\",\n              \"type\": \"string\"\n            }\n          ]\n        }\n      },\n      \"id\": \"format-final-no-tool\",\n      \"name\": \"Format Response (No Tool)\",\n      \"type\": \"n8n-nodes-base.set\",\n      \"typeVersion\": 3.2,\n      \"position\": [1560, 400]\n    },\n    {\n      \"parameters\": {},\n      \"id\": \"merge-responses\",\n      \"name\": \"Merge Responses\",\n      \"type\": \"n8n-nodes-base.merge\",\n      \"typeVersion\": 2.1,\n      \"position\": [2220, 300]\n    },\n    {\n      \"parameters\": {\n        \"respondWith\": \"json\",\n        \"responseBody\": \"={{ $json }}\"\n      },\n      \"id\": \"respond-webhook\",\n      \"name\": \"Respond to Webhook\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"typeVersion\": 1,\n      \"position\": [2440, 300]\n    }\n  ],\n  \"connections\": {\n    \"Webhook\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract Message\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract Message\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Discover MCP Tools\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Discover MCP Tools\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Agent Decision\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Agent Decision\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Parse Decision\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Parse Decision\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Tool Needed?\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Tool Needed?\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Execute MCP Tool\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Format Response (No Tool)\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Execute MCP Tool\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Format Tool Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Format Tool Response\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Format Response (With Tool)\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Format Response (With Tool)\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge Responses\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Format Response (No Tool)\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge Responses\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Merge Responses\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Respond to Webhook\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  },\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"staticData\": null,\n  \"tags\": [],\n  \"triggerCount\": 1,\n  \"updatedAt\": \"2024-01-27T12:00:00.000Z\",\n  \"versionId\": \"1\"\n}\n
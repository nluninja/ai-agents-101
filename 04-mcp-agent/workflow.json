{
  "name": "04 - MCP Agent",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "mcp-agent",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-mcp",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract message from webhook\nconst body = $input.first().json.body;\nconst message = body.message;\n\nif (!message) {\n  throw new Error('Message is required');\n}\n\nreturn [{\n  json: {\n    message,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "extract-message",
      "name": "Extract Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Simulated MCP Tool Discovery\n// In production, this would communicate with actual MCP server via stdio\n\nconst mcpTools = [\n  {\n    name: 'read_file',\n    description: 'Read the contents of a file from the filesystem',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: {\n          type: 'string',\n          description: 'Path to the file to read'\n        }\n      },\n      required: ['path']\n    }\n  },\n  {\n    name: 'list_directory',\n    description: 'List all files and directories in a given path',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: {\n          type: 'string',\n          description: 'Directory path to list'\n        }\n      },\n      required: ['path']\n    }\n  },\n  {\n    name: 'search_files',\n    description: 'Search for files matching a pattern',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        pattern: {\n          type: 'string',\n          description: 'Search pattern (e.g., \"*.js\")'\n        },\n        directory: {\n          type: 'string',\n          description: 'Directory to search in'\n        }\n      },\n      required: ['pattern', 'directory']\n    }\n  }\n];\n\nreturn [{\n  json: {\n    tools: mcpTools,\n    serverInfo: {\n      name: 'filesystem-server',\n      version: '1.0.0'\n    }\n  }\n}];"
      },
      "id": "discover-mcp-tools",
      "name": "Discover MCP Tools",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300],
      "notes": "This simulates MCP tool discovery. In production, integrate with actual MCP server."
    },
    {
      "parameters": {
        "model": "gemini-1.5-flash",
        "options": {
          "temperature": 0.7
        },
        "text": "={{ $('Extract Message').first().json.message }}",
        "systemMessage": "You are an AI assistant with access to filesystem tools via MCP (Model Context Protocol).\n\nYou have access to these tools:\n{{ $json.tools }}\n\nWhen users ask to:\n- Read files: Use read_file tool\n- List directories: Use list_directory tool\n- Search files: Use search_files tool\n\nAnalyze the user's request and determine which tool to use. Format your tool call as JSON:\n\n{\n  \"tool\": \"tool_name\",\n  \"arguments\": { ... }\n}\n\nIf no tool is needed, respond conversationally."
      },
      "id": "agent-decision",
      "name": "Agent Decision",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [900, 300],
      "credentials": {
        "googleGeminiApi": {
          "id": "gemini-credentials",
          "name": "Google Gemini API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse agent decision and check if tool call is needed\nconst agentResponse = $input.first().json.message;\n\ntry {\n  // Try to extract JSON from response\n  const jsonMatch = agentResponse.match(/\\{[\\s\\S]*\\}/);\n  \n  if (jsonMatch) {\n    const toolCall = JSON.parse(jsonMatch[0]);\n    \n    if (toolCall.tool && toolCall.arguments) {\n      return [{\n        json: {\n          needsToolCall: true,\n          tool: toolCall.tool,\n          arguments: toolCall.arguments,\n          originalResponse: agentResponse\n        }\n      }];\n    }\n  }\n  \n  // No tool call needed\n  return [{\n    json: {\n      needsToolCall: false,\n      response: agentResponse\n    }\n  }];\n} catch (error) {\n  // Parsing error, treat as regular response\n  return [{\n    json: {\n      needsToolCall: false,\n      response: agentResponse\n    }\n  }];\n}"
      },
      "id": "parse-decision",
      "name": "Parse Decision",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.needsToolCall }}",
              "value2": "true"
            }
          ]
        }
      },
      "id": "check-tool-needed",
      "name": "Tool Needed?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "jsCode": "// Execute MCP Tool\n// In production, this would communicate with MCP server\n\nconst toolName = $input.first().json.tool;\nconst args = $input.first().json.arguments;\n\n// Simulate tool execution\nlet result;\n\nswitch (toolName) {\n  case 'read_file':\n    result = {\n      success: true,\n      content: `[Simulated file content from ${args.path}]\n\nThis is example content. In production, this would read from actual MCP server.`,\n      path: args.path\n    };\n    break;\n    \n  case 'list_directory':\n    result = {\n      success: true,\n      files: ['file1.txt', 'file2.js', 'folder1', 'README.md'],\n      path: args.path\n    };\n    break;\n    \n  case 'search_files':\n    result = {\n      success: true,\n      matches: ['src/app.js', 'src/utils.js', 'tests/test.js'],\n      pattern: args.pattern,\n      directory: args.directory\n    };\n    break;\n    \n  default:\n    result = {\n      success: false,\n      error: `Unknown tool: ${toolName}`\n    };\n}\n\nreturn [{\n  json: {\n    toolName,\n    result,\n    executedAt: new Date().toISOString()\n  }\n}];"
      },
      "id": "execute-mcp-tool",
      "name": "Execute MCP Tool",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 200],
      "notes": "Simulates MCP tool execution. Replace with actual MCP server communication."
    },
    {
      "parameters": {
        "model": "gemini-1.5-flash",
        "options": {
          "temperature": 0.7
        },
        "messages": {
          "messageValues": [
            {
              "message": "={{ $('Extract Message').first().json.message }}"
            },
            {
              "message": "Tool executed: {{ $json.toolName }}\n\nResult: {{ JSON.stringify($json.result) }}\n\nProvide a helpful response to the user based on this tool result."
            }
          ]
        },
        "systemMessage": "You are a helpful assistant. Format tool results into natural, user-friendly responses."
      },
      "id": "format-tool-response",
      "name": "Format Tool Response",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [1780, 200],
      "credentials": {
        "googleGeminiApi": {
          "id": "gemini-credentials",
          "name": "Google Gemini API"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success",
              "name": "success",
              "value": "true",
              "type": "boolean"
            },
            {
              "id": "response",
              "name": "response",
              "value": "={{ $json.message }}",
              "type": "string"
            },
            {
              "id": "used-mcp",
              "name": "usedMCP",
              "value": "true",
              "type": "boolean"
            },
            {
              "id": "timestamp",
              "name": "timestamp",
              "value": "={{ $now }}",
              "type": "string"
            }
          ]
        }
      },
      "id": "format-final-with-tool",
      "name": "Format Response (With Tool)",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [2000, 200]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success",
              "name": "success",
              "value": "true",
              "type": "boolean"
            },
            {
              "id": "response",
              "name": "response",
              "value": "={{ $json.response }}",
              "type": "string"
            },
            {
              "id": "used-mcp",
              "name": "usedMCP",
              "value": "false",
              "type": "boolean"
            },
            {
              "id": "timestamp",
              "name": "timestamp",
              "value": "={{ $now }}",
              "type": "string"
            }
          ]
        }
      },
      "id": "format-final-no-tool",
      "name": "Format Response (No Tool)",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [1560, 400]
    },
    {
      "parameters": {},
      "id": "merge-responses",
      "name": "Merge Responses",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [2220, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "respond-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2440, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Message": {
      "main": [
        [
          {
            "node": "Discover MCP Tools",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Discover MCP Tools": {
      "main": [
        [
          {
            "node": "Agent Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agent Decision": {
      "main": [
        [
          {
            "node": "Parse Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Decision": {
      "main": [
        [
          {
            "node": "Tool Needed?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tool Needed?": {
      "main": [
        [
          {
            "node": "Execute MCP Tool",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Response (No Tool)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute MCP Tool": {
      "main": [
        [
          {
            "node": "Format Tool Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Tool Response": {
      "main": [
        [
          {
            "node": "Format Response (With Tool)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response (With Tool)": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response (No Tool)": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Responses": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-01-27:12:00:00.000Z",
  "versionId": "1"
}